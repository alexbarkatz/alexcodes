#include<vector>
#include<iostream>
#include<algorithm>
#include<deque>
#include<iterator>
#include<list>
#include<vector>

using namespace std;


int main()
{
	vector<int> vecList(10, 0);
	vector<int>list2(10,0);//create a vector of size 10 and fill it with 8s
	vector<int>::iterator move, beg, end;  //create 3 iterators
	int choice,resize,fillin,insert;
	while (1)
	{
		cout << endl;
		cout << "\t" << "MENU" << endl;
		cout << "\t" << "====" << endl << endl;
		cout << "1.  Delete" << endl;            // vecList.clear() Deletes all the elements from the container.
		cout << "2.  Return the first element" << endl;   //vecList.front()
		cout << "3.  Return the last element" << endl;    //veclist.back()
		cout << "4.  Search" << endl;     // vecCont.empty() Returns true if the container vecCont is empty, false otherwise.
		cout << "5.  Check how many elements in your vector" << endl;//vecCont.size() Returns the number of elements currently in the container vecCont.
		cout << "6.  Delete the last element" << endl; // vecList.pop_back()Deletes the last element.
		cout << "7.  Resize your vector" << endl; // vecList.resize(num, elem)Changes the number of elements to num.If size() increases, the default constructor creates the new elements.
		cout << "8.  Copy vector" << endl;
		cout << "9.  Insert number " << endl;
		cout << "10. Print vector" << endl;

		cin >> choice;

		switch (choice)
		{
		case 1:
		{
			vecList.clear();
			break;
		}
		case 2:
		{
			cout<<vecList.front();
			break;
		}
		case 3:
		{
			cout<<vecList.back();
			break;
		}
		case 4:
		{
			int num = 0;
			cout << "Enter a number to search:";
			cin >> num;
			if (binary_search(vecList.begin(), vecList.end(), num))
				cout << "Number is present" << endl;
			else
				cout << "Number is absent" << endl;
			break;
		}
		case 5:
		{
			cout<<vecList.size();
			break;
		}
		case 6:
		{
			vecList.pop_back();
			break;
		}
		case 7:
		{
			cout << "\nWhat would you like to resize to? ";
			cin >> resize;
			cout << "\nWhat number would you like to fill in? ";
				cin >> fillin;
			vecList.resize(resize, fillin);


			break;
		}
		case 8:
		
			//create a new vector
			list2 = vecList;//copy all contents of list to list2
			for (move = vecList.begin(); move < vecList.end(); move++)//display list using iterators
				cout << *move << " ";
			cout << endl;
			for (move = list2.begin(); move < list2.end(); move++)//display list using iterators
				cout << *move << " ";
			break;
		
		case 9:
		{
			cout << "What number would you like to insert? ";
			cin >> insert;
			vecList.push_back(insert);
			break;
		}
		case 10:
		{
			for (move = vecList.begin(); move < vecList.end(); move++)//display list using iterators
				cout << *move << " ";

			break;
		}
		}

	}


	system("pause");
	return 0;
}
PROGRAM 2:
 Deques

#include<vector>
#include<iostream>
#include<algorithm>
#include<deque>
#include<iterator>
#include<list>
#include<vector>

using namespace std;


int main()
{
	deque<int> deqList(10, 0);
	deque<int>list2(10,0);//create a vector of size 10 and fill it with 8s
	deque<int>::iterator move, beg, end;  //create 3 iterators
	int choice,resize,fillin,insert;
	while (1)
	{
		cout << endl;
		cout << "\t" << "MENU" << endl;
		cout << "\t" << "====" << endl << endl;
		cout << "1.  Delete" << endl;            // vecList.clear() Deletes all the elements from the container.
		cout << "2.  Return the first element" << endl;   //vecList.front()
		cout << "3.  Return the last element" << endl;    //veclist.back()
		cout << "4.  Search" << endl;     // vecCont.empty() Returns true if the container vecCont is empty, false otherwise.
		cout << "5.  Check how many elements in your deque" << endl;//vecCont.size() Returns the number of elements currently in the container vecCont.
		cout << "6.  Delete the last element" << endl; // vecList.pop_back()Deletes the last element.
		cout << "7.  Resize your deque" << endl; // vecList.resize(num, elem)Changes the number of elements to num.If size() increases, the default constructor creates the new elements.
		cout << "8.  Copy deque" << endl;
		cout << "9.  Insert number " << endl;
		cout << "10. Print deque" << endl;

		cin >> choice;

		switch (choice)
		{
		case 1:
		{
			deqList.clear();
			break;
		}
		case 2:
		{
			cout<<deqList.front();
			break;
		}
		case 3:
		{
			cout<<deqList.back();
			break;
		}
		case 4:
		{
			int num = 0;
			cout << "Enter a number to search:";
			cin >> num;
			if (binary_search(deqList.begin(), deqList.end(), num))
				cout << "Number is present" << endl;
			else
				cout << "Number is absent" << endl;
			break;
		}
		case 5:
		{
			cout<<deqList.size();
			break;
		}
		case 6:
		{
			deqList.pop_back();
			break;
		}
		case 7:
		{
			cout << "\nWhat would you like to resize to? ";
			cin >> resize;
			cout << "\nWhat number would you like to fill in? ";
				cin >> fillin;
			deqList.resize(resize, fillin);


			break;
		}
		case 8:
		
			//create a new vector
			list2 = deqList;//copy all contents of list to list2
			for (move = deqList.begin(); move < deqList.end(); move++)//display list using iterators
				cout << *move << " ";
			cout << endl;
			for (move = list2.begin(); move < list2.end(); move++)//display list using iterators
				cout << *move << " ";
			break;
		
		case 9:
		{
			cout << "What number would you like to insert? ";
			cin >> insert;
			deqList.push_back(insert);
			break;
		}
		case 10:
		{
			for (move = deqList.begin(); move < deqList.end(); move++)//display list using iterators
				cout << *move << " ";

			break;
		}
		}

	}


	system("pause");
	return 0;
}

PROGRAM 3

Lists

#include<vector>
#include<iostream>
#include<algorithm>
#include<deque>
#include<iterator>
#include<list>
#include<vector>

using namespace std;


int main()
{
	list<int> List(10);
	list<int>list2(10);//create a list of size 10
	list<int>::iterator move, beg, end;  //create 3 iterators
	
	ostream_iterator<int> screen(cout, " ");
	int choice, resize, fillin, insert;
	while (1)
	{
		cout << endl;
		cout << "\t" << "MENU" << endl;
		cout << "\t" << "====" << endl << endl;
		cout << "1.  Delete" << endl;            // vecList.clear() Deletes all the elements from the container.
		cout << "2.  Return the first element" << endl;   //vecList.front()
		cout << "3.  Return the last element" << endl;    //veclist.back()
		cout << "4.  Search" << endl;     // vecCont.empty() Returns true if the container vecCont is empty, false otherwise.
		cout << "5.  Check how many elements in your list" << endl;//vecCont.size() Returns the number of elements currently in the container vecCont.
		cout << "6.  Delete the last element" << endl; // vecList.pop_back()Deletes the last element.
		cout << "7.  Resize your list" << endl; // vecList.resize(num, elem)Changes the number of elements to num.If size() increases, the default constructor creates the new elements.
		cout << "8.  Remove Duplicate numbers" << endl;
		cout << "9.  Insert number " << endl;
		cout << "10. Print list" << endl;

		cin >> choice;

		switch (choice)
		{
		case 1:
		{
			List.clear();
			break;
		}
		case 2:
		{
			cout << List.front();
			break;
		}
		case 3:
		{
			cout << List.back();
			break;
		}
		case 4:
		{
			int num = 0;
			cout << "Enter a number to search:";
			cin >> num;
			if (binary_search(List.begin(), List.end(), num))
				cout << "Number is present" << endl;
			else
				cout << "Number is absent" << endl;
			break;
		}
		case 5:
		{
			cout << List.size();
			break;
		}
		case 6:
		{
			List.pop_back();
			break;
		}
		case 7:
		{
			cout << "\nWhat would you like to resize to? ";
			cin >> resize;
			cout << "\nWhat number would you like to fill in? ";
			cin >> fillin;
			List.resize(resize, fillin);


			break;
		}
		case 8:

			List.unique();
			break;

		case 9:
		{
			cout << "What number would you like to insert? ";
			cin >> insert;
			List.push_back(insert);
			break;
		}
		case 10:
		{
			copy(List.begin(), List.end(), screen);

			break;
		}
		}

	}
